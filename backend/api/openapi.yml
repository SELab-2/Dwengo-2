openapi: 3.0.0
info:
  version: 1.0.0
  title: Dwengo API
  description: |
    The Dwengo API facilitates user authentication, management of users, classes, groups, learning objects, learning paths, assignments, and interactive Q&A features for the Dwengo learning platform.
  contact:
    url: 'https://github.com/SELab-2/Dwengo-2'
  license:
    name: MIT
    url: 'https://mit-license.org/'
servers:
  - url: 'https://sel2-2.ugent.be'
    description: Production server
tags:
  - name: authentication
    description: Endpoints for user registration and authentication, including login and token management
  - name: users
    description: User account management operations including profile updates and user information retrieval
  - name: requests
    description: Manage invitations and join requests for classes, including sending, accepting and rejecting requests
  - name: progresses
    description: Track and manage student progress through learning paths, objects and assignments
  - name: classes
    description: Manage educational classes, including creation, enrollment, and class settings
  - name: groups
    description: Manage student groups within classes, including group creation, assignment and membership
  - name: assignments
    description: Create and manage assignments, including deadlines, instructions and submissions
  - name: questions
    description: Handle Q&A interactions between students and teachers, including asking and answering questions
  - name: learningPath
    description: Manage learning paths that organize educational content into structured sequences
  - name: learningObject
    description: Handle learning objects like lessons, exercises and interactive content
security:
  - apiKeyAuth: []

paths:
  /register:
    post:
      tags:
        - authentication
      security: []
      summary: Register a new user
      description: |
        Create a new user account with email and and password.
        The email must be unique and not already registered in the system. The password will be
        used to authenticate the user. Returns 201 on successful registration.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          $ref: '#/components/responses/EntityCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
  /login:
    post:
      tags:
        - authentication
      security: []
      summary: Login user
      description: |
        Authenticate a user by verifying their email and password. Returns user ID and token
        for constructing the X-API-Token header.'
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/LoginResponseOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  '/users/{id}':
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieves detailed information about a specific user by their unique identifier. Only accessible by the user themselves or administrators.
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: userType
          required: true
          schema:
            type: string
            enum: [student, teacher]
      responses:
        '200':
          $ref: '#/components/responses/UserOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - users
      summary: Update user data
      description: Modify user information such as name, email, or userType. Only accessible by the user themselves or administrators. Will return the updated user data.
      operationId: updateUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: userType
          required: false
          schema:
            type: string
            enum: [student, teacher]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '204':
          $ref: '#/components/responses/UpdateOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - users
      summary: Delete user
      description: Permanently delete a user account and all associated data by their unique identifier. Only accessible by administrators.
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: userType
          required: false
          schema:
            type: string
            enum: [student, teacher]
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/classes/{idParent}/users':
    get:
      tags:
        - users
      summary: Get all users in class
      description: Retrieves a list of all users in a specific class.
      operationId: getClassUsers
      parameters:
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          $ref: '#/components/responses/AllUsers'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/classes/{idParent}/users/{id}':
    delete:
      tags:
        - users
      summary: Remove user from class
      description: Remove a user from a specific class. Only allowed by teachers and admins.
      operationId: deleteClassUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuidÂµ
        - in: query
          name: userType
          required: true
          schema:
            type: string
            enum: [student, teacher]
              
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/groups/{idParent}/users':
    get:
      tags:
        - users
      summary: Get all users in group
      description: Retrieves a list of all users assigned to a specific group.
      operationId: getGroupUsers
      parameters:
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          $ref: '#/components/responses/AllStudents'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - users
      summary: Assign user to group
      description: Assign a new user to a specific group. Only allowed by teachers and admins.
      operationId: createGroupUser
      parameters:
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionUserCreate'
      responses:
        '201':
          $ref: '#/components/responses/CreateOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/groups/{idParent}/users/{id}':
    delete:
      tags:
        - users
      summary: Remove user from group
      description: Remove a user from a specific group. Only allowed by teachers and admins.
      operationId: deleteGroupUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: userType
          required: true
          schema:
            type: string
            enum: [student, teacher]
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/assignments/{idParent}/users':
    get:
      tags:
        - users
      summary: Get all users in assignment
      description: Retrieves a list of all users assigned to a specific assignment.
      operationId: getAssignmentUsers
      parameters:
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          $ref: '#/components/responses/AllStudents'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve a list of all users in the system. Only accessible by administrators.
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          $ref: '#/components/responses/AllUsers'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/requests/{id}':
    get:
      tags:
        - requests
      summary: Get request by ID
      description: Retrieves detailed information about a specific request using its unique identifier.
      operationId: getRequestById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/JoinRequestOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - requests
      summary: Accept a request
      description: Update a request by its unique identifier (accept).
      operationId: updateRequest
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/UpdateOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - requests
      summary: Delete a request
      description: Permanently delete a request by its unique identifier.
      operationId: deleteRequest
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /requests:
    post:
      tags:
        - requests
      summary: Create a new joinrequest.
      description: Create a new request for a user to join a class.
      operationId: createRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinRequestCreate'
      responses:
        '201':
          $ref: '#/components/responses/EntityCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/users/{idParent}/requests':
    get:
      tags:
        - requests
      summary: Get all user's requests
      description: Retrieve a list of all requests belonging to a specific user.
      operationId: getUserRequests
      parameters:
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          $ref: '#/components/responses/RequestsOK'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/classes/{id}':
    get:
      tags:
        - classes
      summary: Get class by ID
      description: Retrieve detailed information about a specific class belonging using its unique identifier.
      operationId: getClassById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/ClassOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - classes
      summary: Update class data
      description: Modify class information including name, description, and other class settings.
      operationId: updateClass
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassUpdate'
      responses:
        '204':
          $ref: '#/components/responses/UpdateOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - classes
      summary: Delete class
      description: Permanently delete a class and all associated data by its unique identifier.
      operationId: deleteClass
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /classes:
    post:
      tags:
        - classes
      summary: Create new class
      description: Create a new class with specified name, description and initial settings.
      operationId: createClass
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassCreate'
      responses:
        '201':
          $ref: '#/components/responses/EntityCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/users/{idParent}/classes':
    get:
      tags:
        - classes
      summary: Get all user's classes
      description: Retrieve a list of all classes belonging to a specific user.
      operationId: getUserClasses
      parameters:
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          $ref: '#/components/responses/ClassesOK'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/groups/{id}':
    get:
      tags:
        - groups
      summary: Get group by ID
      description: Retrieve detailed information about a specific group using its unique identifier.
      operationId: getGroupById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/GroupOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - groups
      summary: Update group
      description: Modify group information including membership and settings.
      operationId: updateGroup
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
                  
      responses:
        '204':
          $ref: '#/components/responses/UpdateOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - groups
      summary: Delete group
      description: Permanently delete a group and its associated data by its unique identifier.
      operationId: deleteGroup
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /groups:
    post:
      tags:
        - groups
      summary: Create new group
      description: Create a new group with specified settings and initial membership.
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
      responses:
        '201':
          $ref: '#/components/responses/EntityCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/users/{idParent}/groups':
    get:
      tags:
        - groups
      summary: Get all groups for user
      description: Retrieve a list of all groups associated with a specific user.
      operationId: getUserGroups
      parameters:
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          $ref: '#/components/responses/GroupsOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/assignments/{idParent}/groups':
    get:
      tags:
        - groups
      summary: Get all groups for an assignment
      description: Retrieve a list of all groups associated with a specific assignment.
      operationId: getAssignmentGroups
      parameters:
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          $ref: '#/components/responses/GroupsOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  '/learningPath':
    get:
      tags:
        - learningPath
      description: |
        Get all learningPaths available from the Dwengo API filtered with params.
      parameters:
        - name: all
          in: query
          description: | 
            This parameter takes a string as a value and searches all learning paths
            for which the value occurs in the title, description, or hruid.
            (This can have an empty string as a parameter which matches all descriptions and titles)
            If multiple words want to be searched these can be added with a '-' e.g. "robot-python-arduino".
          schema:
            type: string
        - name: language
          in: query
          description: Language of the learning path
          schema:
            type: string
        - name: hruid
          in: query
          description: Search for learning paths with this human-readable unique identifier
          schema:
            type: string
        - name: title
          in: query
          description: Search for titles containing a specific search term
          schema:
            type: string
        - name: description
          in: query
          description: Search for descriptions containing a specific search term
          schema:
            type: string
        - in: query
          name: includeNodes
          schema:
            type: boolean
          description: Whether or not to include the nodes of the learningPath
      responses:
        '200':
          $ref: '#/components/responses/PathSearchOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        

  '/learningPath/{id}':
    get:
      tags:
        - learningPath
      description: Get a learningPath given it's hruid and preffered language.
      parameters:
        - in: path
          name: id
          required: true 
          schema:
            type: string
          description: The hruid of the learningPath
        - in: query
          name: language
          schema:
            type: string
          description: The language of the learningPath
        - in: query
          name: includeNodes
          schema:
            type: boolean
          description: Whether or not to include the nodes of the learningPath
      responses:
        '200':
          $ref: '#/components/responses/LearningPathOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

# TODO  '/paths/{idParent}/objects/{id}':
#    get:
#      tags:
#        - objects
#      summary: Get learning object from path by ID
#      description: Retrieve detailed information about a specific learning object within a learning path by their unique identifiers.
#      operationId: getPathObjectById
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: string
#            format: uuid
#        - in: path
#          name: idParent
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        '200':
#          $ref: '#/components/responses/LearningObjectOK'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '404':
#          $ref: '#/components/responses/NotFound'
#  '/paths/{idParent}/objects':
#    get:
#      tags:
#        - objects
#      summary: Get all learning objects from path
#      description: Retrieve a list of all learning objects associated with a specific learning path.
#      operationId: getPathObjects
#      parameters:
#        - in: path
#          name: idParent
#          required: true
#          schema:
#            type: string
#            format: uuid
#        - $ref: '#/components/parameters/PageParam'
#        - $ref: '#/components/parameters/PageSizeParam'
#      responses:
#        '200':
#          $ref: '#/components/responses/LearningObjectsOK'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#  '/objects/{id}':
#    patch:
#      tags:
#        - objects
#      summary: Update learning object
#      description: Modify an existing learning object's properties.
#      operationId: updateObject
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: string
#            format: uuid
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/LearningObjectUpdate'
#      responses:
#        '204':
#          $ref: '#/components/responses/UpdateOK'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '404':
#          $ref: '#/components/responses/NotFound'
#    delete:
#      tags:
#        - objects
#      summary: Delete learning object
#      description: Permanently delete a learning object by its unique identifier.
#      operationId: deleteObject
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        '204':
#          $ref: '#/components/responses/NoContent'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '404':
#          $ref: '#/components/responses/NotFound'
  '/learningObject':
    get:
      tags:
        - learningObject
      description: |
        Get all learningObjects available from the Dwengo API filtered with params.
      parameters:
        - name: searchTerm
          in: query
          description: A generic search term used to match words in the title, description, and keywords.
          schema:
            type: string
        - name: uuid
          in: query
          description: Search for learning objects with uuid
          schema:
            type: string
        - name: hruid
          in: query
          description: Search for learning objects with hruid
          schema:
            type: string
        - name: version
          in: query
          description: Search for specific version
          schema:
            type: number
        - name: language
          in: query
          description: Search for a specific language
          schema:
            type: string
        - name: contentType
          in: query
          description: Search for a specific dwengo content type
          schema:
            type: string
            enum: ["text/plain", "text/markdown", "image/image-block", "image/image", "audio/mpeg", "application/pdf", "extern", "blockly"]
        - name: available
          in: query
          description: Filter search on (un)available learning objects
          schema:
            type: boolean
        - name: teacherExclusive
          in: query
          description: Filter search on learning content for teachers and not students
          schema:
            type: boolean
        - name: difficulty
          in: query
          description: Search specific difficulty
          schema:
            type: integer
        - name: title
          in: query
          description: Search matches if title contains searchTerm
          schema:
            type: string
        - name: description
          in: query
          description: Search matches if description contains searchTerm
          schema:
            type: string
        - name: targetAges
          in: query
          description: JSON array with ages to match
          schema:
            type: array
            items:
              type: integer
        - name: keywords
          in: query
          description: JSON array with keywords to match
          schema:
            type: array
            items:
              type: string
        - name: skosConcepts
          in: query
          description: JSON array with skos concepts to match
          schema:
            type: array
            items:
              type: string
        - name: minDifficulty
          in: query
          description: Search for learning objects with a difficulty higher than min difficulty
          schema:
            type: integer
        - name: maxDifficulty
          in: query
          description: Search for learning objects with a difficulty lower than max difficulty
          schema:
            type: integer
        - name: minTime
          in: query
          description: Search for learning objects with a duration longer than min time
          schema:
            type: integer
        - name: maxTime
          in: query
          description: Search for learning objects with a duration shorter than max time
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/ObjectSearchOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        
  '/learningObject/{id}':
    get:
      description: |
        Get a learningObject by it's hruid, the learningObject is made of the metadata + the html in raw or wrapped format.
        When no version is given or the requested version is unavailable, the latest version will be returned.
        When no language is given or the requested version is unavailable, it will default to english.
        If English is also unavailable it will fall back to the first language that is available from the Dwengo API.
      parameters:
        - in: path
          name: id
          required: true
          description: The hruid of the learningobject
          schema:
            type: string 
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [wrapped, raw]       
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: version 
          schema:
            type: number
      tags:
        - learningObject
      responses:
        '200':
          $ref: '#/components/responses/LearningObjectOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    # post:
    #   tags:
    #     - objects
    #   summary: Create new learning object
    #   description: Create a new learning object with the specified properties.
    #   operationId: createObject
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/LearningObjectCreate'
    #   responses:
    #     '201':
    #       $ref: '#/components/responses/EntityCreated'
    #     '400':
    #       $ref: '#/components/responses/BadRequest'
    #     '401':
    #       $ref: '#/components/responses/Unauthorized'

# TODO  '/paths/{id}':
#    get:
#      tags:
#        - paths
#      summary: Get learning path details
#      description: Retrieve detailed information about a specific learning path, including its objects and metadata.
#      operationId: getPathById
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        '200':
#          $ref: '#/components/responses/LearningPathOK'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '404':
#          $ref: '#/components/responses/NotFound'
#    patch:
#      tags:
#        - paths
#      summary: Update learning path properties
#      description: Modify a learning path's properties such as name, description, and object sequence.
#      operationId: updatePath
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: string
#            format: uuid
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/LearningPathUpdate'
#      responses:
#        '204':
#          $ref: '#/components/responses/UpdateOK'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '404':
#          $ref: '#/components/responses/NotFound'
#    delete:
#      tags:
#        - paths
#      summary: Delete learning path permanently
#      description: Permanently remove a learning path and its associations by its unique identifier.
#      operationId: deletePath
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        '204':
#          $ref: '#/components/responses/NoContent'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '404':
#          $ref: '#/components/responses/NotFound'
#  /paths:
#    get:
#      tags:
#        - paths
#      summary: List all learning paths
#      description: Retrieve a paginated list of all learning paths with their basic information.
#      operationId: getPaths
#      parameters:
#        - $ref: '#/components/parameters/PageParam'
#        - $ref: '#/components/parameters/PageSizeParam'
#      responses:
#        '200':
#          $ref: '#/components/responses/LearningPathsOK'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#    post:
#      tags:
#        - paths
#      summary: Create learning path
#      description: Create a new learning path with specified name, description and sequence of learning objects.
#      operationId: createPath
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/LearningPathCreate'
#      responses:
#        '201':
#          $ref: '#/components/responses/EntityCreated'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '401':
#          $ref: '#/components/responses/Unauthorized'

  '/assignments/{id}':
    get:
      tags:
        - assignments
      summary: Get assignment by ID
      description: Retrieve detailed information about a specific assignment using its unique identifier.
      operationId: getAssignmentById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/AssignmentOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - assignments
      summary: Update assignment
      description: Modify assignment details including start date, deadline and instructions.
      operationId: updateAssignment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentUpdate'
      responses:
        '204':
          $ref: '#/components/responses/UpdateOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - assignments
      summary: Delete assignment
      description: Permanently delete an assignment and its associated data by its unique identifier.
      operationId: deleteAssignment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /assignments:
    post:
      tags:
        - assignments
      summary: Create new assignment
      description: Create a new assignment with specified start date, deadline and instructions.
      operationId: createAssignment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentCreate'
      responses:
        '201':
          $ref: '#/components/responses/EntityCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/users/{idParent}/assignments':
    get:
      tags:
        - assignments
      summary: Get all user's assignments
      description: Retrieve a list of all assignments associated with a specific user.
      operationId: getUserAssignments
      parameters:
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          $ref: '#/components/responses/AssignmentsOK'
        '401':
          $ref: '#/components/responses/Unauthorized'

# TODO  '/users/{idParent}/progresses/{id}':
#    get:
#      tags:
#        - progresses
#      summary: Get user progress by ID
#      description: Retrieve detailed information about a specific progress entry for a user by their unique identifiers.
#      operationId: getUserProgressById
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: string
#            format: uuid
#        - in: path
#          name: idParent
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        '200':
#          $ref: '#/components/responses/ProgressOK'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '404':
#          $ref: '#/components/responses/NotFound'
#  '/users/{idParent}/progresses':
#    get:
#      tags:
#        - progresses
#      summary: Get all user progresses
#      description: Retrieve a list of all progress entries for a specific user.
#      operationId: getUserProgresses
#      parameters:
#        - in: path
#          name: idParent
#          required: true
#          schema:
#            type: string
#            format: uuid
#        - $ref: '#/components/parameters/PageParam'
#        - $ref: '#/components/parameters/PageSizeParam'
#      responses:
#        '200':
#          $ref: '#/components/responses/ProgressesOK'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#  '/users-assignments/{idParent}/progresses/{id}':
#    get:
#      tags:
#        - progresses
#      summary: Get user assignment progress by ID
#      description: Retrieve detailed information about a specific progress entry for a user assignment by their unique identifiers.
#      operationId: getUserAssignmentProgressById
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: string
#            format: uuid
#        - in: path
#          name: idParent
#          required: true
#          schema:
#            type: string
#            pattern: '^u[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}-a[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
#          description: Compound identifier in format 'u{userUuid}-a{assignmentUuid}'
#      responses:
#        '200':
#          $ref: '#/components/responses/ProgressOK'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '404':
#          $ref: '#/components/responses/NotFound'
#  '/users-assignments/{idParent}/progresses':
#    get:
#      tags:
#        - progresses
#      summary: Get all user asignment progresses
#      description: Retrieve a list of all progress entries for a specific user asignment.
#      operationId: getUserAssignmentProgresses
#      parameters:
#        - in: path
#          name: idParent
#          required: true
#          schema:
#            type: string
#            pattern: '^u[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}-a[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
#          description: Compound identifier in format 'u{userUuid}-a{assignmentUuid}'
#        - $ref: '#/components/parameters/PageParam'
#        - $ref: '#/components/parameters/PageSizeParam'
#      responses:
#        '200':
#          $ref: '#/components/responses/ProgressesOK'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#  '/progresses/{id}':
#    patch:
#      tags:
#        - progresses
#      summary: Update progress status
#      description: 'Modify progress information including status, answers and completion details.'
#      operationId: updateProgress
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: string
#            format: uuid
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              required:
#                - data
#              properties:
#                data:
#                  $ref: '#/components/schemas/ProgressUpdate'
#      responses:
#        '204':
#          $ref: '#/components/responses/UpdateOK'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '404':
#          $ref: '#/components/responses/NotFound'
#    delete:
#      tags:
#        - progresses
#      summary: Delete progress entry
#      description: Permanently delete a progress entry and its associated data by its unique identifier.
#      operationId: deleteProgress
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        '204':
#          $ref: '#/components/responses/NoContent'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '404':
#          $ref: '#/components/responses/NotFound'
#  /progresses:
#    post:
#      tags:
#        - progresses
#      summary: Create new progress entry
#      description: Create a new progress entry for tracking user advancement through learning content.
#      operationId: createProgress
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/ProgressCreate'
#      responses:
#        '201':
#          $ref: '#/components/responses/EntityCreated'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '401':
#          $ref: '#/components/responses/Unauthorized'

  '/questions/{id}':
    get:
      tags:
        - questions
      summary: Get question by ID
      description: Retrieve detailed information about a specific question its unique identifier.
      operationId: getQuestionById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/QuestionOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - questions
      summary: Update question
      description: Modify a question, such as providing an answer or adding remarks.
      operationId: updateQuestion
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionUpdate'
      responses:
        '204':
          $ref: '#/components/responses/UpdateOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - questions
      summary: Delete question
      description: Permanently delete a question using its unique identifier.
      operationId: deleteQuestion
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /questions:
    post:
      tags:
        - questions
      summary: Create new question
      description: Create a new question.
      operationId: createQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreate'
      responses:
        '201':
          $ref: '#/components/responses/EntityCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/assignments/{idParent}/questions':
    get:
      tags:
        - questions
      summary: Get all assignment questions
      description: Retrieve a list of all questions associated with a specific assignment entry.
      operationId: getAssignmentQuestions
      parameters:
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          $ref: '#/components/responses/QuestionsOK'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/messages/{id}':
    get:
      tags:
        - messages
      summary: Get message by ID
      description: Retrieve detailed information about a specific message using its unique identifier.
      operationId: getMessageById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/MessageOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - messages
      summary: Update message
      description: Modify a message.
      operationId: updateMessage
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageUpdate'
      responses:
        '204':
          $ref: '#/components/responses/UpdateOK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - messages
      summary: Delete message
      description: Permanently delete a message.
      operationId: deleteMessage
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /messages:
    post:
      tags:
        - messages
      summary: Create new message
      description: Create a new message.
      operationId: createMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreate'
      responses:
        '201':
          $ref: '#/components/responses/EntityCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/questions/{idParent}/messages':
    get:
      tags:
        - messages
      summary: Get all question messages
      description: Retrieve a list of all messages associated with a specific question.
      operationId: getQuestionMessages
      parameters:
        - in: path
          name: idParent
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          $ref: '#/components/responses/MessagesOK'
        '401':
          $ref: '#/components/responses/Unauthorized'

# TODO - Submissions

components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Token
      description: Authentication token in format 'userId.signedChallenge'
  parameters:
    PageParam:
      in: query
      name: page
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for pagination
    PageSizeParam:
      in: query
      name: pageSize
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items per page
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UpdateOK:
      description: Update on entity successful.
    CreateOK: # Creation with empty return, so no ID
      description: Creation on collection successful.
    UserOK:
      description: User request completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPublic'
    JoinRequestOK:
      description: Invite request completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JoinRequest'
    ClassOK:
      description: Class request completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Class'
    GroupOK:
      description: Group request completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
    LearningObjectOK:
      description: Learning object request completed successfully
      content:
        application/json:
          schema:
            $ref: '#components/schemas/LearningObject'
    ObjectSearchOK:
      description: Learning object search request completed sucessfully
      content:
        application/json:
          schema:
            type: object
            properties:
              learningObjects:
                type: array
                items:
                  $ref: "#/components/schemas/Metadata"
    MetadataOK:
      description: Metadata request completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Metadata'
    PathSearchOK:
      description: Learning path search request completed sucessfully
      content:
        application/json:
          schema:
            type: object
            properties:
              learningPaths:
                type: array
                items:
                  $ref: "#/components/schemas/LearningPath"
    LearningPathOK:
      description: Learning path request completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LearningPath'
    AssignmentOK:
      description: Assignment request completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Assignment'
    ProgressOK:
      description: Progress request completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Progress'
    QuestionOK:
      description: Question request completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Question'
    MessageOK:
      description: Message collection request completed successfully
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Message'
    LoginResponseOK:
      description: Login request completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginResponse'
    UsersOK:
      description: Users collection request completed successfully
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserPublic'
    AllUsers:
      description: User collection  request completed successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              students:
                type: array
                items:
                  type: string
                  format: uuid
              teachers:
                type: array
                items:
                  type: string
                  format: uuid
    AllStudents:
      description: User collection request completed successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              students:
                type: array
                items:
                  type: string
                  format: uuid
    RequestsOK:
      description: Requests collection request completed successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              requests:
                type: array
                items:
                  type: string
                  format: uuid
    ClassesOK:
      description: Classes collection request completed successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  type: string
                  format: uuid
    GroupsOK:
      description: Groups collection request completed successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              groups:
                items:
                  type: string
                  format: uuid
                description: All groups of a specific user.
    MetadatasOK:
      description: Learning objects collection request completed successfully
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Metadata'
    LearningPathsOK:
      description: Learning paths collection request completed successfully
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LearningPath'
    AssignmentsOK:
      description: Assignments collection request completed successfully
      content:
        application/json:
          schema:
            type: object
            properties: 
              assignments:
                type: array
                items:
                  type: string
                  format: uuid
    ProgressesOK:
      description: Progresses collection request completed successfully
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Progress'
    QuestionsOK:
      description: Questions collection request completed successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              threads:
                type: array
                items:
                  type: string
                  format: uuid
    MessagesOK:
      description: Messages collection request completed successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              messages:
                type: array
                items:
                  type: string
                  format: uuid
            

    EntityCreated:
      description: Entity created successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
    NoContent:
      description: Resource deleted successfully
  schemas:
    EmptyObject:
      type: object
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code identifier
        message:
          type: string
          description: Human-readable error message

    LoginResponse:
      type: object
      required:
        - id
        - expiresAt
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the user.
        expiresAfter:
          type: string
          format: time
          description: When this challenge expires
        token:
          type: string
          format: uuid
          description: The token for this session.
    LoginRequest:
      type: object
      required:
        - email
        - password
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password.

    RegisterResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the user.
    RegisterRequest:
      type: object
      required:
        - email
        - firstName
        - familyName
        - schoolName
        - password
        - userType
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          description: User's email address.
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's firstname.
        familyName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's family name.
        schoolName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's school name.
        password:
          type: string
          description: Users password
        userType:
          type: string
          enum: [student, teacher]
          default: student
          description: User's type in the system.

    LearningObjectUpdate:
      type: object
    LearningObjectCreate:
      type: object

    LearningPath:
      type: object
      properties:
        hruid:
          type: string
        id:
          type: string
        language:
          type: string
        title:
          type: string
        description:
          type: string
        image:
          type: string # Base64String
          description: image with Base64String format
        numNodes:
          type: number
        keywords:
          type: array
          items:
            type: string
        targetAges:
          type: array
          items:
            type: number
        minAge:
          type: number
        maxAge:
          type: number
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/LearningPathObject'
        
        
    LearningPathObject:
      type: object
      properties:
        hruid:
          type: string
        id:
          type: string
        version:
          type: number
        language:
          type: string
        startNode:
          type: boolean
        transitions:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/BaseLearningObject'
        
    BaseLearningObject:
      type: object
      properties:
        hruid:
          type: string
        id:
          type: string
        version:
          type: number
        language:
          type: string

        
    LearningPathUpdate:
      type: object
    LearningPathCreate:
      type: object
    User:
      type: object
      required:
        - id
        - email
        - firstName
        - familyName
        - schoolName
        - userType
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the user.
        email:
          type: string
          format: email
          description: User's email address.
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's firstname.
        familyName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's family name.
        schoolName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's school name.
        userType:
          type: string
          enum: [student, teacher]
          description: User's type in the system.
    UserPublic:
      type: object
      required:
        - id
        - email
        - firstName
        - familyName
        - schoolName
        - passwordHash
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user.
        email:
          type: string
          format: email
          description: User's email address.
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's firstname.
        familyName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's family name.
        schoolName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's school name.
        passwordHash:
          type: string
    UserCreate:
      type: object
      required:
        - email
        - firstName
        - familyName
        - schoolName
        - password
        - userType
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          description: User's email address.
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's firstname.
        familyName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's family name.
        school:
          type: string
          minLength: 1
          maxLength: 50
          description: User's school name.
        password:
          type: string
          description: The user's password
        userType:
          type: string
          enum: [student, teacher]
          default: student
          description: User's type in the system.
    UserUpdate:
      type: object
      minProperties: 1
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          description: User's email address.
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's firstname.
        familyName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's family name.
        schoolName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's school name.
        password:
          type: string
          description: User's password
        userType:
          type: string
          enum: [student, teacher]
          default: student
          description: User's type in the system.
    CollectionUserCreate:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user.

    JoinRequest:
      type: object
      required:
        - id
        - requester
        - class
        - userType
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the joinrequest.
        requester:
          type: string
          format: uuid
          description: ID of the user sending the request.
        class:
          type: string
          format: uuid
          description: ID of the class.
        userType:
          type: string
          enum: [student, teacher]
          description: Type of requester.
    JoinRequestCreate:
      type: object
      required:
        - requester
        - class
        - userType
      additionalProperties: false
      properties:
        requester:
          type: string
          format: uuid
          description: ID of the user sending the request.
        class:
          type: string
          format: uuid
          description: ID of the class.
        userType:
          type: string
          enum: [student, teacher]
          description: Type of requester.
    Class:
      type: object
      required:
        - id
        - name
        - description
        - targetAudience
        - teacherId
      properties:
        id:
          type: string
          format: uuid
          description: Unique id of the class
        name:
          type: string
          minLength: 1
          maxLength: 50
          description: Name of the class.
        description:
          type: string
          description: Description of a class.
        targetAudience:
          type: string
          description: The target audience of a class.
        teacherId:
          type: string
          format: uuid
          description: Unique id of the teacher (owner) of this class
    ClassCreate:
      type: object
      required:
        - name
        - description
        - targetAudience
        - teacherId
      additionalProperties: false
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          description: Name of the class.
        description:
          type: string
          description: Description of a class.
        targetAudience:
          type: string
          description: The target audience of a class.
        teacherId:
          type: string
          format: uuid
    ClassUpdate:
      type: object
      required:
        - name
        - description
        - targetAudience
      additionalProperties: false
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          description: Name of the class.
        description:
          type: string
          description: Description of a class.
        targetAudience:
          type: string
          description: The target audience of a class.
    Group:
      type: object
      required:
        - id
        - assignment
        - members
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the group.
        assignment:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the group's assignment.
        members:
          type: array
          items:
            type: string
            format: uuid
            description: An array of student IDs assigned to this group.
    GroupCreate:
      type: object
      required:
        - assignment
        - members
      additionalProperties: false
      properties:
         assignment:
          type: string
          format: uuid
          description: Unique identifier for the group's assignment.
         members:
          type: array
          items:
            type: string
            format: uuid
            description: An array of student IDs assigned to this group.
    GroupUpdate:
      type: object
      required:
        - members
        - assignment
      properties:
        members:
          type: array
          items: 
            type: string
            format: uuid
            description: The new members of the group.
        assignment:
          type: string
          format: uuid
          description: The new assignment of the group.

    Assignment:
      type: object
      required:
        - id
        - classId
        - learningPathId
        - startDate
        - deadline
        - name
        - extraInstructions
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the assignment.
        classId:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for class that the assignment's belongs to.
        startDate:
          type: string
          format: date
          description: Start date of the assignment.
        deadline:
          type: string
          format: date
          description: Deadline date of the assignment.
        name:
          type: string
          minLength: 0
          description: Name of the assignment.
        extraInstructions:
          type: string
          minLength: 0
          description: Instructions for the assignment.
    AssignmentCreate:
      type: object
      required:
        - classId
        - learningPathId
        - startDate
        - deadline
        - name
        - extraInstructions
      additionalProperties: false
      properties:
        classId:
          type: string
          format: uuid
          description: Unique identifier for the assignment's class.
        learningPathId:
          type: string
          description: Unique identifier for the assignment's learning path.
        startDate:
          type: string
          format: date
          description: Start date of the assignment.
        deadline:
          type: string
          format: date
          description: Deadline date of the assignment.
        name:
          type: string
          minLength: 0
          description: Name of the assignment.
        extraInstructions:
          type: string
          minLength: 0
          description: Instructions for the assignment.
    AssignmentUpdate:
      type: object
      minProperties: 1
      additionalProperties: false
      properties:
        classId:
          type: string
          format: uuid
          description: Unique id of class this assignment belongs to.
        learningPathId:
          type: string
          format: string
          description: Unique id of learning path that belongs to this assignment.
        startDate:
          type: string
          format: date
          description: Start date of the assignment.
        deadline:
          type: string
          format: date
          description: Deadline date of the assignment.
        name:
          type: string
          minLength: 0
          description: Name of the assignment.
        extraInstructions:
          type: string
          minLength: 0
          description: Instructions for the assignment.

    Progress:
      type: object
      required:
        - id
        - path
        - object
        - assignment
        - group
        - user
        - question
        - answer
        - status
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the progress.
        path:
          type: string
          format: uuid
          description: ID of the learning path.
        object:
          type: string
          format: uuid
          description: ID of the learning object.
        assignment:
          type: string
          format: uuid
          description: ID of the assignment.
        group:
          type: string
          format: uuid
          description: ID of the group.
        user:
          type: string
          format: uuid
          description: ID of the user.
        question:
          type: string
          format: uuid
          description: ID of the question.
        answer:
          type: string
          format: uuid
          description: ID of the answer.
        status:
          type: string
          enum: ['PENDING', 'STARTED', 'COMPLETED']
          description: Current status of the progress.
    ProgressCreate:
      type: object
      required:
        - path
        - object
        - assignment
        - group
        - user
        - question
        - status
      additionalProperties: false
      properties:
        path:
          type: string
          format: uuid
          description: ID of the learning path.
        object:
          type: string
          format: uuid
          description: ID of the learning object.
        assignment:
          type: string
          format: uuid
          description: ID of the assignment.
        group:
          type: string
          format: uuid
          description: ID of the group.
        user:
          type: string
          format: uuid
          description: ID of the user.
        status:
          type: string
          enum: ['PENDING', 'STARTED', 'COMPLETED']
          description: Current status of the progress.
    ProgressUpdate:
      type: object
      minProperties: 1
      additionalProperties: false
      properties:
        question:
          type: string
          format: uuid
          description: ID of the question.
        answer:
          type: string
          format: uuid
          description: ID of the question.
        status:
          type: string
          enum: ['PENDING', 'STARTED', 'COMPLETED']
          description: Current status of the progress.

    Question:
      type: object
      required:
        - id
        - creatorId
        - assignmentId
        - learningObjectId
        - isClosed
        - visibility
        - messageIds
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the question.
        creatorId:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the user that made this QT.
        assignmentId:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the assignment linked to this QT.
        learningObjectId:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the learning object linked to the QT.          
        isClosed:
          type: boolean
          default: false
        visibility:
          type: string
          enum: [public, group, private]
        messageIds:
          type: array
          items:
            type: string
            format: uuid
    QuestionCreate:
      type: object
      required:
        - creatorId
        - assignmentId
        - learningObjectId
        - isClosed
        - visibility
      properties:
        creatorId:
          type: string
          format: uuid
          description: Unique identifier for the user that made this QT.
        assignmentId:
          type: string
          format: uuid
          description: Unique identifier for the assignment linked to this QT.
        learningObjectId:
          type: string
          format: uuid
          description: Unique identifier for the learning object linked to the QT.          
        isClosed:
          type: boolean
          default: false
        visibility:
          type: string
          enum: [public, group, private]
    QuestionUpdate:
      type: object
      minProperties: 1
      additionalProperties: false
      properties:
        isClosed:
          type: boolean
        visibility:
          type: string
          enum: [public, group, private]

    Message:
      type: object
      required:
        - id
        - senderId
        - threadId
        - content
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the message.
        senderId:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the sender of this message.
        threadId:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the thread this message belongs to.
        content:
          type: string
          description: The content of the message.
        createdAt:
          type: string
          format: date
        
    MessageCreate:
      type: object
      required:
        - senderId
        - threadId
        - createdAt
        - content
      additionalProperties: false
      properties:
        senderId:
          type: string
          format: uuid
          description: Unique identifier for the sender of this message.
        threadId:
          type: string
          format: uuid
          description: Unique identifier for the thread this message belongs to.
        createdAt:
          type: string
          format: date
        content:
          type: string
          minLength: 1
          description: The content of the message.
    MessageUpdate:
      type: object
      minProperties: 1
      additionalProperties: false
      properties:
        content:
          type: string
          minLength: 1
          description: The new content of the message.

    LearningObject:
      type: object
      properties:
        metadata:
          type: object
          $ref: '#/components/schemas/Metadata'
          description: The metadata containing info about the learnign object
        content:
          type: string
          description: The string containing the HTML of the learning object

    Metadata:
      type: object
      properties:
        hruid:
          type: string
          description: Human readable unique id
        uuid:
          type: string
          description: Numerical equivalent of hruid
        id:
          type: string
          description: Unique id
        version:
          type: integer
          description: The version of that specific learning object. Unique in combination with hruid (or uuid) and language.
        language:
          type: string
          description: The language of the learning object.
        title:
          type: string
          description: Short description of the learning object.
        description:
          type: string
          description: Long description of the learning object.
        contentType:
          type: string
          enum: ["text/plain", "text/markdown", "image/image-block", "image/image", "audio/mpeg", "application/pdf", "extern", "blockly"]
          description: One of the following content types -> "text/plain", "text/markdown", "image/image-block", "image/image", "audio/mpeg", "application/pdf", "extern", "blockly".
